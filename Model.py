# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pZYEApd6QA5ZwNLcibTlf0Db3xqLQlGt
"""



"""TRAINING THE MACHINE LEARNING MODEL"""

class RNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(RNN, self).__init__()
        self.hidden_size = hidden_size
        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, input, hidden):
        out, hidden = self.rnn(input, hidden)
        output = self.fc(out[:, -1, :])
        return output, hidden

    def init_hidden(self):
        return torch.zeros(1, 1, self.hidden_size).to(device)

input_size = n_letters
hidden_size = 128
output_size = 2

model = RNN(input_size, hidden_size, output_size).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.005)